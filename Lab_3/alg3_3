import random
import time


class Node:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None


class BinarySearchTree:
    def __init__(self, N):
        self.N = N
        self.root = [None] * (N + 1)

    def insert(self, x):
        idx = int(x)
        if self.root[idx] is None:
            self.root[idx] = Node(x)
        else:
            self._insert_recursive(self.root[idx], x)

    def _insert_recursive(self, node, x):
        if x <= node.value:
            if node.left is None:
                node.left = Node(x)
            else:
                self._insert_recursive(node.left, x)
        else:
            if node.right is None:
                node.right = Node(x)
            else:
                self._insert_recursive(node.right, x)

    def search(self, x):
        for node in self.root:
            if node is not None and self._search_recursive(node, x):
                return True
        return False

    def _search_recursive(self, node, x):
        if node is None:
            return False
        if node.value == x:
            return True
        elif x < node.value:
            return self._search_recursive(node.left, x)
        else:
            return self._search_recursive(node.right, x)

    def minimum(self):
        min_val = float('inf')
        for node in self.root:
            if node is not None:
                min_val = min(min_val, self._minimum_recursive(node))
        return min_val

    def _minimum_recursive(self, node):
        if node.left is None:
            return node.value
        return self._minimum_recursive(node.left)

    def maximum(self):
        max_val = float('-inf')
        for node in self.root:
            if node is not None:
                max_val = max(max_val, self._maximum_recursive(node))
        return max_val

    def _maximum_recursive(self, node):
        if node.right is None:
            return node.value
        return self._maximum_recursive(node.right)

    def print_structure(self):
        for node in self.root:
            if node is not None:
                print(round(node.value))
                self._print_recursive(node, 1)

    def _print_recursive(self, node, depth):
        if node.left is not None:
            print('  ' * depth + str(round(node.left.value, 2)))
            self._print_recursive(node.left, depth + 1)
        if node.right is not None:
            print('  ' * depth + str(round(node.right.value, 2)))
            self._print_recursive(node.right, depth + 1)


N_values = [25, 50, 100, 500, 1000, 2000, 4000, 8000, 16000, 32000, 64000, 128000]

for N in N_values:
    bst = BinarySearchTree(N)
    random_numbers = [random.uniform(0.5, N + 0.5) for _ in range(N)]

    start_time = time.time()
    for num in random_numbers:
        bst.insert(num)
    insert_time = time.time() - start_time

    rand_num = random.choice(random_numbers)

    start_time = time.time()
    bst.search(rand_num)
    search_time = time.time() - start_time

    start_time = time.time()
    bst.minimum()
    min_time = time.time() - start_time

    start_time = time.time()
    bst.maximum()
    max_time = time.time() - start_time

    print("n:", N,
          "; Insert:", f"{insert_time:.6f}s",
          "; Minimum:", f"{min_time:.6f}s",
          "; Maximum:", f"{max_time:.6f}s"
          "; Search:", f"{search_time:.6f}s",)