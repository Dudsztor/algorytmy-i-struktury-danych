import time


def naive_search(data):
    results = set()
    count = 0
    letters = [list(row) for row in data]

    for i in range(len(data) - 2):
        for j in range(len(data[0]) - 2):
            if (letters[i][j] == 'A' and letters[i][j + 1] == 'B' and letters[i][j + 2] == 'C'):
                if letters[i + 1][j] == 'B' and letters[i + 2][j] == 'C':
                    results.add((i, j))
                    count += 1

    return results, count


def rabin_karp_horizontal(text, pattern, d, q):
    n = len(text)
    m = len(pattern)
    h = pow(d, m - 1) % q
    results = set()

    for row in range(n - 2):
        p_hash = 0
        t_hash = 0

        for i in range(m):
            p_hash = (d * p_hash + ord(pattern[i])) % q
            t_hash = (d * t_hash + ord(text[row][i])) % q

        for col in range(len(text[row]) - m + 1):
            if p_hash == t_hash:
                match = True
                for i in range(m):
                    if text[row][col + i] != pattern[i]:
                        match = False
                        break
                if match:
                    results.add((row, col))

            if col < len(text[row]) - m:
                t_hash = ((t_hash - h * ord(text[row][col])) * d + ord(text[row][col + m])) % q
    return results


def rabin_karp_vertical(text, pattern, d, q, horizontal_results):
    n = len(text)
    m = len(pattern)
    h = pow(d, m - 1) % q
    final_results = set()

    for col in range(len(text[0])):
        p_hash = 0
        t_hash = 0

        for i in range(m):
            p_hash = (d * p_hash + ord(pattern[i])) % q
            t_hash = (d * t_hash + ord(text[i][col])) % q

        for row in range(n - m + 1):
            if p_hash == t_hash:
                match = True
                for i in range(m):
                    if text[row + i][col] != pattern[i]:
                        match = False
                        break

                if match and (row, col) in horizontal_results:
                    final_results.add((row, col))

            if row < n - m:
                t_hash = ((t_hash - h * ord(text[row][col])) * d + ord(text[row + m][col])) % q

    return final_results


def rabin_karp_search(array, pattern):
    horizontal_results = rabin_karp_horizontal(array, pattern, 256, 101)
    results = rabin_karp_vertical(array, pattern, 256, 101, horizontal_results)
    return results


with open('1000_pattern.txt') as file:
    lines = [line.strip() for line in file]

stime1 = time.time()
results_naive, count_naive = naive_search(lines)
endtime1 = time.time() - stime1

print("Naiwny:\nWspółrzędne wystąpień:")
print(results_naive)
print(f"Czas działania: {endtime1:.6f} s")
print(f"Liczba wystąpień: {count_naive}")

stime2 = time.time()
results_rk = rabin_karp_search(lines, "ABC")
endtime2 = time.time() - stime2

print("Karp-Rabin:\nWspółrzędne wystąpień:")
print(results_rk)
print(f"Czas działania: {endtime2:.6f} s")
print(f"Liczba wystąpień: {len(results_rk)}\n")