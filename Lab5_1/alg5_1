import math
import time

def read_cities(filename):
    cities = {}
    with open(filename, 'r') as file:
        for line in file:
            parts = line.strip().split()
            city_id = int(parts[0])
            x = float(parts[1])
            y = float(parts[2])
            cities[city_id] = (x, y)
    return cities

def euclidean_distance(point1, point2):
    dx = point1[0] - point2[0]
    dy = point1[1] - point2[1]
    return math.sqrt(dx*dx + dy*dy)

def path_length(cities, path):
    total_distance = 0
    for i in range(len(path) - 1):
        city_a = cities[path[i]]
        city_b = cities[path[i + 1]]
        total_distance += euclidean_distance(city_a, city_b)
    total_distance += euclidean_distance(cities[path[-1]], cities[path[0]])
    return total_distance

def nearest_neighbor(cities, start_city=1):
    unvisited = set(cities.keys())
    unvisited.remove(start_city)
    path = [start_city]
    current_city = start_city

    while unvisited:
        nearest = min(unvisited, key=lambda city: euclidean_distance(cities[current_city], cities[city]))
        path.append(nearest)
        unvisited.remove(nearest)
        current_city = nearest

    return path

cities = read_cities('TSP.txt')

example_path = list(cities.keys())

start_time = time.time()
example_length = path_length(cities, example_path)
time_example = time.time() - start_time

start_time = time.time()
nn_path = nearest_neighbor(cities, start_city=1)
nn_length = path_length(cities, nn_path)
time_nn = time.time() - start_time

improvement = ((example_length - nn_length) / example_length) * 100

print("Ścieżka wg kolejności z pliku:")
print(f"  Długość ścieżki: {example_length:.2f}")
print(f"  Czas obliczeń: {time_example:.4f} s\n")

print("Ścieżka z algorytmu najbliższego sąsiada:")
print(f"Długość ścieżki: {nn_length:.2f}")
print(f"Czas obliczeń: {time_nn:.4f} s\n")

print(f"Poprawa długości ścieżki: {improvement:.2f}%")
